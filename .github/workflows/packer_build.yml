# This is a basic workflow to help you get started with Actions

name: Packer Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    types:
      - closed
    branches: [ "main" ]

env:
  HOST: ${{ secrets.POSTGRES_DB_HOST }}
  PORT: ${{ secrets.POSTGRES_DB_PORT }}
  DB: ${{ secrets.POSTGRES_DB }}
  USER: ${{ secrets.POSTGRES_USER }}
  PASSWORD: ${{ secrets.POSTGRES_DB_PASSWORD }}
  DIALECT: ${{ secrets.POSTGRES_DIALECT }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  packer_build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'release.zip'
          exclusions: '*.git* /*node_modules/* /*packer/*'

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: release.zip
      
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release

      - name: Packer init
        run: packer init './packer/'
        
      - name: Packer Build
        run: packer build './packer/'

      - name: Upload manifest.json
        uses: actions/upload-artifact@v3
        with:
          name: manifest
          path: manifest.json

  manage-launch_template:
    runs-on: ubuntu-latest
    needs: packer_build
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    
    steps:
      - uses: actions/checkout@v3

      - name: Install AWS CLI and jq
        run: |
          sudo apt-get update && sudo apt-get install -y awscli
          sudo apt install jq

      - name: Download manifest.json
        uses: actions/download-artifact@v3
        with:
          name: manifest

      - name: Fetch latest AMI ID and Launch Template node-version
        id: variables
        run: |
          latest_ami=$(cat manifest.json | jq '.builds[0].artifact_id' | tr -d '"' | awk 'match($0, /ami-.*/) { print substr($0, RSTART, RLENGTH) }')
          echo "Latest AMI ID: $latest_ami"

          lt_version=$(aws ec2 describe-launch-template-versions --launch-template-name asg_launch_config --query 'sort_by(LaunchTemplateVersions, &VersionNumber)[-1].VersionNumber' --output text)
          echo "Latest Launch Template version: $lt_version"

          echo "latest_ami=$latest_ami" >> $GITHUB_OUTPUT
          echo "lt_version=$lt_version" >> $GITHUB_OUTPUT

      - name: Create new Launch Template version
        run: |
          aws ec2 create-launch-template-version --launch-template-name asg_launch_config  --launch-template-data "ImageId=${{ steps.variables.outputs.latest_ami }}" --source-version ${{ steps.variables.outputs.lt_version }}

      - name: Autoscaling group instance refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name aws-dev-asg --strategy Rolling --desired-configuration '{"LaunchTemplate": {"LaunchTemplateName":"asg_launch_config", "Version":"$Latest"}}'
